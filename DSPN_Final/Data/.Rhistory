mutate(ext_a = rowMeans(.[,c(17,19,21)],na.rm=TRUE),
int_a = rowMeans(.[,c(23,25,27)],na.rm=TRUE),
ide_a = rowMeans(.[,c(43,45,47)],na.rm=TRUE),
intro_a = rowMeans(.[,c(49,51,53)],na.rm=TRUE),
amotiv_a = rowMeans(.[,c(3,5,7)],na.rm=TRUE),
integ_a = rowMeans(.[,c(9,11,13)],na.rm=TRUE),
grat_a = rowMeans(.[,c(30,32,34,36,38,40)],na.rm=TRUE),
ext_b = rowMeans(.[,c(18,20,22)],na.rm=TRUE),
int_b = rowMeans(.[,c(24,26,28)],na.rm=TRUE),
ide_b = rowMeans(.[,c(44,46,48)],na.rm=TRUE),
intro_b = rowMeans(.[,c(50,52,54)],na.rm=TRUE),
amotiv_b = rowMeans(.[,c(4,6,8)],na.rm=TRUE),
integ_b = rowMeans(.[,c(10,12,14)],na.rm=TRUE),
grat_b = rowMeans(.[,c(31,33,35,37,39,41)],na.rm=TRUE)) %>%
mutate(ext_dif = ext_b-ext_a,
int_dif = int_b-int_a,
ide_dif = ide_b-ide_a,
intro_dif = intro_b-intro_a,
amotiv_dif = amotiv_b-amotiv_a,
integ_dif = integ_b-integ_a,
grat_dif = grat_b-grat_a) %>%
data.frame()
joined$Condition = factor(joined$Condition,
levels=c("Control","Active","Experimental"))
joined$age = as.numeric(joined$age)
hist(joined$age)
summary(joined$age)
sd(joined$age)
table(joined$gendie)
table(joined$raciallymotivated)
boxplot(joined$grat_dif~joined$Condition)
boxplot(joined$amotiv_dif~joined$Condition)
boxplot(joined$ext_dif~joined$Condition)
boxplot(joined$intro_dif~joined$Condition)
boxplot(joined$ide_dif~joined$Condition)
boxplot(joined$integ_dif~joined$Condition)
boxplot(joined$int_dif~joined$Condition)
summary(joined$HispanicLatino)
summary(as.factor(joined$HispanicLatino))
table(joined$Condition)
aov(grat_dif ~ Condition,data=joined)
aov(grat_dif ~ Condition,data=joined,paired=TRUE)
t.test(exp,control)
exp
t.test(exp$exp_dif,control$exp_dif,paired=TRUE)
t.test(exp$exp_b,control$exp_b,paired=TRUE)
control
t.test(joined$ext_a,joined$ext_b,paired=TRUE)
t.test(joined$ide_a,joined$ide_b,paired=TRUE)
n = 100
x = runif(n,-1,1)
m = sin(5*x)
y = m + rnorm(n,0,.3)
h = c(0.01, 0.05, 0.1, 0.25, 0.5)
kernel = function(x,y,grid,h){
### kernel regression estimator at a grid of values ### one dimension only
### return m.hat(u) for all u in grid
k = length(grid)
m.hat = rep(0,k)
for(i in 1:k){
w = dnorm(grid[i],x,h)
m.hat[i] = sum(y*w)/sum(w)
}
return(m.hat)
}
grid = seq(-1,1,length=50)
for (i in h){
plot(x,y)
lines(grid,kernel(x,y,grid,i),col="blue")
}
kernel.fitted = function(x,y,h){
n = length(x)
m.hat = rep(0,n)
S = rep(0,n)
for(i in 1:n){
w = dnorm(x[i],x,h)
w = w/sum(w)
m.hat[i] = sum(y*w)
S[i] = w[i]
}
return(list(fitted=m.hat,S=S))
}
CV = function(x,y,H){
n = length(x)
k = length(H)
cv = rep(0,k)
nu = rep(0,k)
gcv = rep(0,k)
for(i in 1:k){
tmp = kernel.fitted(x,y,H[i])
cv[i] = mean(((y - tmp$fitted)/(1-tmp$S))^2)
nu[i] = sum(tmp$S)
gcv[i] = mean((y - tmp$fitted)^2)/(1-nu[i]/n)^2
}
return(list(cv=cv,gcv=gcv,nu=nu))
}
CV(x,y,h)
kernel.fitted = function(x,y,h){
n = length(x)
m.hat = rep(0,n)
S = rep(0,n)
for(i in 1:n){
w = dnorm(x[i],x,h)
w = w/sum(w)
m.hat[i] = sum(y*w)
S[i] = w[i]
}
return(list(fitted=m.hat,S=S))
}
CV = function(x,y,H){
n = length(x)
k = length(H)
cv = rep(0,k)
nu = rep(0,k)
gcv = rep(0,k)
for(i in 1:k){
tmp = kernel.fitted(x,y,H[i])
cv[i] = mean(((y - tmp$fitted)/(1-tmp$S))^2)
nu[i] = sum(tmp$S)
gcv[i] = mean((y - tmp$fitted)^2)/(1-nu[i]/n)^2
}
return(list(cv=cv,gcv=gcv,nu=nu))
}
h = seq(.01,.5,length=20)
CV(x,y,h)
kernel.fitted = function(x,y,h){
n = length(x)
m.hat = rep(0,n)
S = rep(0,n)
for(i in 1:n){
w = dnorm(x[i],x,h)
w = w/sum(w)
m.hat[i] = sum(y*w)
S[i] = w[i]
}
return(list(fitted=m.hat,S=S))
}
CV = function(x,y,H){
n = length(x)
k = length(H)
cv = rep(0,k)
nu = rep(0,k)
gcv = rep(0,k)
for(i in 1:k){
tmp = kernel.fitted(x,y,H[i])
cv[i] = mean(((y - tmp$fitted)/(1-tmp$S))^2)
nu[i] = sum(tmp$S)
gcv[i] = mean((y - tmp$fitted)^2)/(1-nu[i]/n)^2
}
return(list(cv=cv,gcv=gcv,nu=nu))
}
h = seq(.01,.5,length=20)
cv = CV(x,y,h)
plot(cv[1]~h)
cv
kernel.fitted = function(x,y,h){
n = length(x)
m.hat = rep(0,n)
S = rep(0,n)
for(i in 1:n){
w = dnorm(x[i],x,h)
w = w/sum(w)
m.hat[i] = sum(y*w)
S[i] = w[i]
}
return(list(fitted=m.hat,S=S))
}
CV = function(x,y,H){
n = length(x)
k = length(H)
cv = rep(0,k)
nu = rep(0,k)
gcv = rep(0,k)
for(i in 1:k){
tmp = kernel.fitted(x,y,H[i])
cv[i] = mean(((y - tmp$fitted)/(1-tmp$S))^2)
nu[i] = sum(tmp$S)
gcv[i] = mean((y - tmp$fitted)^2)/(1-nu[i]/n)^2
}
return(list(cv=cv,gcv=gcv,nu=nu))
}
h = seq(.01,.5,length=20)
cv = CV(x,y,h)
plot(cv$cv~h)
which.min(cv$cv)
which.min(cv$cv)
h[3]
which.min(cv$cv)
h[3]
plot(x,y)
lines(grid,kernel(x,y,grid,h[3]),col="blue")
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(grid,fit,col="blue")
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(x,fit,col="blue")
res = y - fit
plot(x,res)
abline(0,0)
x
ordered(x)
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(ordered(x),fit,col="blue")
res = y - fit
plot(x,res)
abline(0,0)
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(grid,fit,col="blue")
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(x,fit,col="blue")
res = y - fit
plot(x,res)
abline(0,0)
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(ordered(x),fit,col="blue")
res = y - fit
plot(x,res)
abline(0,0)
line = c(x,fit)
line
line = data.frame(x,fit)
line
ordered(line)
order(x)
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(ordered(x),fit[order(x)],col="blue")
res = y - fit
plot(x,res)
abline(0,0)
which.min(cv$cv)
fit = kernel(x,y,x,h[3])
plot(x,y)
lines(x[order(x)],fit[order(x)],col="blue")
res = y - fit
plot(x,res)
abline(0,0)
require(glmnet)
net = glmnet(x,y)
n = 200; p = 1000
x <- matrix(rnorm(n*p),nrow=n)
beta <- c(rep(1,10),rep(0,p-10))
y = x %*% beta + rnorm(n)
require(glmnet)
net = glmnet(x,y)
plot(net)
net
net = glmnet(x,y)
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso) ### nice plot of cv
cv_lasso$lambda.min ### best vaue
coef(cv_lasso,s="lambda.min")
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
cv_lasso$lambda.min ### best vaue
coef = coef(cv_lasso,s="lambda.min")
plot(beta,coef)
beta
coef
length(beta)
length(coef)
head(coef)
coef[-1]
coef = coef(cv_lasso,s="lambda.min")
plot(beta,coef[-1])
coef = coef(cv_lasso,s="lambda.min")
plot(coef[-1],beta)
n = 200; p = 1000
x <- matrix(rnorm(n*p),nrow=n)
beta <- c(rep(1,10),rep(0,p-10))
y = x %*% beta + rnorm(n)
require(glmnet)
net = glmnet(x,y)
plot(net)
cv_lasso$lambda
cv_lasso$lambda.1se
cv_lasso$cvm
?cv.glmnet
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso$lambda,cv_lasso$cvm)
cv_lasso = cv.glmnet(x,y)
plot(cv_lasso)
plot(cv_lasso$lambda,cv_lasso$cvm)
coef = coef(cv_lasso,s="lambda.min")
plot(beta,coef[-1])
n = 100
x = runif(n,-1,1)
m = sin(5*x)
y = m + rnorm(n,0,.3)
h = c(0.01, 0.05, 0.1, 0.25, 0.5)
kernel = function(x,y,grid,h){
### kernel regression estimator at a grid of values ### one dimension only
### return m.hat(u) for all u in grid
k = length(grid)
m.hat = rep(0,k)
for(i in 1:k){
w = dnorm(grid[i],x,h)
m.hat[i] = sum(y*w)/sum(w)
}
return(m.hat)
}
for (i in h){
plot(x,y)
lines(x[order(x)],kernel(x,y,x,i)[order(x)],col="blue")
}
knitr::opts_chunk$set(echo = TRUE)
require(readxl)
require(tidyverse)
require(reshape)
require(lsr)
setwd("C:/Users/david/Downloads")
post = read_excel("RM_MG_COMPLETED_POST.xlsx")
pre = read_excel("RM_INFORMED_CONSENT.xlsx")
surveys = read_excel("RMSP_2023_Emails.xlsx")
post$email = sub("@.+","",post$email) %>% tolower()
pre$email = sub("@.+","",pre$email) %>% tolower()
surveys$Email = sub("@.+","",surveys$Email) %>% tolower()
surveys = surveys %>% select(Email, 'Daily Surveys Sent')
colnames(surveys) = c("email","surveys")
joined = left_join(post,pre,by="email") %>%
.[-1,] %>%
left_join(.,surveys,by="email") %>%
.[,order(names(.))] %>%
mutate(across(c(3:14,17:28,30:41,43:54),as.numeric)) %>%
mutate_at(c(34,35,40,41),
~ recode(.,"1"=7,"2"=6,"3"=5,"4"=4,"5"=3,"6"=2,"7"=1)) %>%
mutate(ext_a = rowMeans(.[,c(17,19,21)],na.rm=TRUE),
int_a = rowMeans(.[,c(23,25,27)],na.rm=TRUE),
ide_a = rowMeans(.[,c(43,45,47)],na.rm=TRUE),
intro_a = rowMeans(.[,c(49,51,53)],na.rm=TRUE),
amotiv_a = rowMeans(.[,c(3,5,7)],na.rm=TRUE),
integ_a = rowMeans(.[,c(9,11,13)],na.rm=TRUE),
grat_a = rowMeans(.[,c(30,32,34,36,38,40)],na.rm=TRUE),
ext_b = rowMeans(.[,c(18,20,22)],na.rm=TRUE),
int_b = rowMeans(.[,c(24,26,28)],na.rm=TRUE),
ide_b = rowMeans(.[,c(44,46,48)],na.rm=TRUE),
intro_b = rowMeans(.[,c(50,52,54)],na.rm=TRUE),
amotiv_b = rowMeans(.[,c(4,6,8)],na.rm=TRUE),
integ_b = rowMeans(.[,c(10,12,14)],na.rm=TRUE),
grat_b = rowMeans(.[,c(31,33,35,37,39,41)],na.rm=TRUE)) %>%
mutate(ext_dif = ext_b-ext_a,
int_dif = int_b-int_a,
ide_dif = ide_b-ide_a,
intro_dif = intro_b-intro_a,
amotiv_dif = amotiv_b-amotiv_a,
integ_dif = integ_b-integ_a,
grat_dif = grat_b-grat_a) %>%
data.frame()
joined$Condition = factor(joined$Condition,
levels=c("Control","Active","Experimental"))
joined$age = as.numeric(joined$age)
hist(joined$age)
summary(joined$age)
sd(joined$age)
table(joined$gendie)
table(joined$raciallymotivated)
boxplot(joined$grat_dif~joined$Condition)
boxplot(joined$amotiv_dif~joined$Condition)
boxplot(joined$ext_dif~joined$Condition)
boxplot(joined$intro_dif~joined$Condition)
boxplot(joined$ide_dif~joined$Condition)
boxplot(joined$integ_dif~joined$Condition)
boxplot(joined$int_dif~joined$Condition)
int = joined %>% group_by(Condition) %>%
summarise(across(c(int_a,int_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
ext = joined %>% group_by(Condition) %>%
summarise(across(c(ext_a,ext_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
ide = joined %>% group_by(Condition) %>%
summarise(across(c(ide_a,ide_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
intro = joined %>% group_by(Condition) %>%
summarise(across(c(intro_a,intro_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
amotiv = joined %>% group_by(Condition) %>%
summarise(across(c(amotiv_a,amotiv_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
integ = joined %>% group_by(Condition) %>%
summarise(across(c(integ_a,integ_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
grat = joined %>% group_by(Condition) %>%
summarise(across(c(grat_a,grat_b),mean,na.rm=TRUE)) %>% data.frame %>%
melt(.,id="Condition")
levels(int$variable) = c("pre-manipulation","post-manipulation")
levels(ext$variable) = c("pre-manipulation","post-manipulation")
levels(ide$variable) = c("pre-manipulation","post-manipulation")
levels(intro$variable) = c("pre-manipulation","post-manipulation")
levels(amotiv$variable) = c("pre-manipulation","post-manipulation")
levels(integ$variable) = c("pre-manipulation","post-manipulation")
levels(grat$variable) = c("pre-manipulation","post-manipulation")
interaction.plot(grat$variable,grat$Condition,grat$value,ylim=range(0:6),
xlab="",ylab="Gratitude",lty=1,
col=c("black","red","blue"))
interaction.plot(amotiv$variable,amotiv$Condition,amotiv$value,ylim=range(0:4),
xlab="",ylab="Amotivation",lty=1,
col=c("black","red","blue"),legend=FALSE)
interaction.plot(ext$variable,ext$Condition,ext$value,ylim=range(0:4),
xlab="",ylab="External Regulation",lty=1,
col=c("black","red","blue"),legend=FALSE)
interaction.plot(intro$variable,intro$Condition,intro$value,ylim=range(0:4),
xlab="",ylab="Introjected Avoidance",lty=1,
col=c("black","red","blue"),legend=FALSE)
interaction.plot(ide$variable,ide$Condition,ide$value,ylim=range(0:4),
xlab="",ylab="Identified Regulation",lty=1,
col=c("black","red","blue"),legend=FALSE)
interaction.plot(integ$variable,integ$Condition,integ$value,ylim=range(0:4),
xlab="",ylab="Integrated Regulation",lty=1,
col=c("black","red","blue"),legend=FALSE)
interaction.plot(int$variable,int$Condition,int$value,ylim=range(0:4),
xlab="",ylab="Intrinsic Motivation",lty=1,
col=c("black","red","blue"),legend=FALSE)
joined
joined %>% group_by(Condition) %>% summarise(mean)
joined %>% group_by(Condition) %>% summarise(mean = mean)
joined %>% group_by(Condition) %>% summarise(mean(ext_dif))
joined %>% group_by(Condition) %>% summarise(mean(ext_dif),na.rm=TRUE)
joined %>% group_by(Condition) %>% summarise(mean(ext_dif,na.rm=TRUE))
knitr::opts_chunk$set(echo = TRUE)
#load libraries
library(tidyverse)
library(leaps)
library(boot)
library(GGally)
#get data
setwd("C:/Users/david/Phan_DSPN_S23/DSPN_Final/Data")
df = read.csv("deck_data")
df_adj = df
head(df_adj)
names(df_adj)
names(df_adj)[names(df_adj) == 'X'] <- 'deck'
#categorize archetypes into aggro, control, or combo
df_adj = df_adj %>%
mutate(archetype=case_when(grepl("Aggro",archetype) ~ 'Aggro',
grepl("Control",archetype) ~ 'Control',
grepl("Combo",archetype) ~ 'Combo',
TRUE ~ archetype))
#categorize unique archetypes
#mtgtop8 categorizes these but I couldn't figure out how to extract that
unique(df_adj$archetype)
df_adj = df_adj %>% mutate(archetype=case_when(
archetype %in% c("WeenieWhite","DevotiontoGreen","RedDeckWins","Angels",
"ArclightPhoenix","Auras","Elves","Humans","Dragons",
"Goblins","Affinity","Merfolk") ~ "Aggro",
archetype %in% c("FiresofInvention","Jund","OmnathRamp",
"NivMizzetReborn","GreenRamp","Enchantress") ~ "Control",
archetype %in% c("JeskaiAscendancy","LotusField","Winota","Greasefang",
"Creativity","Transmogrify","GreasefangParhelion",
"Reanimator","NeoformAtraxa","Gyruda","Dragonstorm",
"KinnanEmry","TaintedOracle","JeskaiTurns") ~ "Combo",
TRUE ~ archetype))
#drop decks without archetypes
drop = which(df_adj$archetype=="Other" | df_adj$archetype=="Combo")
df_adj = df_adj[-drop,]
#control for decksize
df_adj = df_adj %>%
mutate(MV=MV/(decksize-lands)) %>%
mutate(across(c(lands:other),~ .*60/decksize)) %>%
mutate(across(MV0:MV6.,~ .*60/decksize)) %>%
mutate(across(lands:other,round)) %>%
mutate(across(MV0:MV6.,round))
#categorize formats
df_adj = df_adj %>% mutate(format=case_when(
format %in% c("ST","ALCH") ~ "Rotating",
TRUE ~ "Nonrotating"))
#make sure categorical variables are factors
df_adj$archetype = as.factor(df_adj$archetype)
df_adj$companion = as.factor(df_adj$companion)
df_adj$format = as.factor(df_adj$format)
#split the data
set.seed(20495)
test = sample(1:nrow(df_adj),nrow(df_adj)/2)
df_test = df_adj[test,]
df_train = df_adj[-test,]
nrow(df_adj)
df_adj
nrow(df_train)
nrow(df_test)
nrow(df_adj)
nrow(df)
names(df)
names(df_adj)
df_adj
test = df_adj %>% select(-MV0,-MV1,-MV2,-MV3,-MV4,-MV5,-MV6.)
names(df_adj)
test = df_adj %>% select(-MV0,-MV1,-MV2,-MV3,-MV4,-MV5,-MV6.-other)
test
test = df_adj %>% select(-MV0,-MV1,-MV2,-MV3,-MV4,-MV5,-MV6.-Other)
test = df_adj %>% select(-MV0,-MV1,-MV2,-MV3,-MV4,-MV5,-MV6.,-other)
test
write.csv(test,"final_df")
setwd("C:/Users/david/Phan_DSPN_S23/DSPN_Final/Data")
read.csv(test,"final_df")
write.csv(test,"final_df")
read.csv("final_df")
names(test)
test
row.names(test)
write.csv(test,"final_df",row.names=FALSE)
read.csv("final_df")
