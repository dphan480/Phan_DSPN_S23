summary(rlm_control)
2*qt(0.025,285,lower.tail=FALSE)
plot(lands~MV,data=df_combo)
hist(glm_combo$residuals)
rlm_control = rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=df_control)
summary(rlm_control)
2*qt(0.025,285,lower.tail=FALSE)
cv_err_control  = cv.glm(df_control, glm_control)
cv_err_control$delta[1]
boot_func_rlm <- function(data, index){
return(coef(rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot_control = boot(df_control,boot_func_rlm.fn,R=1000)
rlm_control = rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=df_control)
summary(rlm_control)
2*qt(0.025,285,lower.tail=FALSE)
cv_err_control  = cv.glm(df_control, glm_control)
cv_err_control$delta[1]
boot_func_rlm <- function(data, index){
return(coef(rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot_control = boot(df_control,boot_func_rlm,R=1000)
boot_control
df_perm_control = df_control
perm_coefs_acontrol = matrix(NA,1000,6)
colnames(perm_coefs_control) = c("intercept",
"MV",
"mdfcs",
"cantrips",
"ramp",
"companion")
rlm_control = rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=df_control)
summary(rlm_control)
2*qt(0.025,285,lower.tail=FALSE)
cv_err_control  = cv.glm(df_control, glm_control)
cv_err_control$delta[1]
boot_func_rlm <- function(data, index){
return(coef(rlm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot_control = boot(df_control,boot_func_rlm,R=1000)
boot_control
df_perm_control = df_control
perm_coefs_control = matrix(NA,1000,6)
colnames(perm_coefs_control) = c("intercept",
"MV",
"mdfcs",
"cantrips",
"ramp",
"companion")
for (i in 1:1000){
df_perm_control = df_perm_control %>%
mutate(across(c(MV,mdfcs,cantrips,ramp,companion),
~ .[sample(nrow(df_control))]))
perm_coefs_control[i,] = coef(rlm(lands ~ MV+mdfcs+cantrips+ramp+companion,
data=df_perm_control))
}
for (i in 2:6){
hist(perm_coefs_control[,i],xlab=colnames(perm_coefs_control)[i])
}
install.packages("leaps")
library(leaps)
glm_full = regsubsets(MV~MV+mdfcs+cantrips+ramp+companion, df_adj, nvmax=19)
glm_full = regsubsets(lands~MV+mdfcs+cantrips+ramp+companion, df_adj, nvmax=19)
glm_full
summary(glm_full)$adjr2
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
summary(glm_full)$adjr2
test = summary(glm_full)$adjr2
test = summary(glm_full)
test$adjr2
summary(glm_full)
summary(glm_full)[1]
summary(glm_full)[1][1]
summary(glm_full)[[1]]
test$adjr2
which(max(test$adjr2))
which(test$adjr2==max(test$adjr2))
test$which[15]
test$which[15,]
which.min(test$bic)
which.max(test$adjr2)
which.min(test$cp)
test$which[13,]
test$which[14,]
test$which[13,]
cv_err
cv_err$call
cv_err$K
cv_err$delta
test$which[15,]
glm_full
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
test$which[15,]
test$which[14,]
test$which[13,]
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs+cantrips)*archtype + ramp + companion, data=df_adj)
summary(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm,type='predictor')
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
?vif
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~MV+mdfcs + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~MV+mdfcs + cantrips + ramp + companion+archtype, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
vif(glm)
#cross validation
cv_err  = cv.glm(df_adj, glm)
cv_err$delta[1]
#bootstrapping
boot.fn <- function(data, index){
return(coef(glm(lands ~ MV + mdfcs + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot = boot(df_adj,boot.fn,R=1000)
boot
#bootstrapping
boot.fn <- function(data, index){
return(coef(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index)))
#bootstrapping
boot.fn <- function(data, index){
return(coef(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index))
}
boot = boot(df_adj,boot.fn,R=1000)
boot
#bootstrapping
boot.fn <- function(data, index){
return(coef(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index))
}
boot = boot(df_adj,boot.fn,R=1000)
boot
boot
?boot
#bootstrapping
boot_func <- function(data, index){
return(coef(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index))
}
boot = boot(df_adj,boot_func,R=1000)
boot
#bootstrapping
boot_func <- function(data, index){
return(coef(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index))
}
boot = boot(df_adj,boot_func,R=2000)
boot
#bootstrapping
boot_func <- function(data, index){
return(coef(glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot = boot(df_adj,boot_func,R=1000)
boot
boxplot(ad_adj$MV~df_adj$archtype)
boxplot(df_adj$MV~df_adj$archtype)
aov(MV~archtype,data=df_adj)
summary(aov(MV~archtype,data=df_adj))
#permutation tests
df_perm = df_adj
perm_coefs = matrix(NA,1000,6)
colnames(perm_coefs) = c("intercept",
"MV",
"mdfcs",
"combo",
"control",
"cantrips",
"ramp",
"companion",
"mvcombo",
"mvcontrol",
"mdfccombo",
"mdfccontrol")
#permutation tests
df_perm = df_adj
perm_coefs = matrix(NA,1000,12)
colnames(perm_coefs) = c("intercept",
"MV",
"mdfcs",
"combo",
"control",
"cantrips",
"ramp",
"companion",
"mvcombo",
"mvcontrol",
"mdfccombo",
"mdfccontrol")
for (i in 1:1000){
df_perm = df_perm %>% mutate(across(c(MV,mdfcs,cantrips,ramp,companion,archetype),
~ .[sample(nrow(df_perm))]))
perm_coefs[i,] = coef(glm(lands ~ (MV+mdfcs)*archtype+cantrips+ramp+companion,
data=df_perm))
}
#permutation tests
df_perm = df_adj
perm_coefs = matrix(NA,1000,12)
colnames(perm_coefs) = c("intercept",
"MV",
"mdfcs",
"combo",
"control",
"cantrips",
"ramp",
"companion",
"mvcombo",
"mvcontrol",
"mdfccombo",
"mdfccontrol")
for (i in 1:1000){
df_perm = df_perm %>% mutate(across(c(MV,mdfcs,cantrips,ramp,companion,archtype),
~ .[sample(nrow(df_perm))]))
perm_coefs[i,] = coef(glm(lands ~ (MV+mdfcs)*archtype+cantrips+ramp+companion,
data=df_perm))
}
for (i in 1:6){
hist(perm_coefs[,i],xlab=colnames(perm_coefs)[i])
}
cv_err
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
cv_err$delta
glm
coef(glm)
coef(glm)[1]
for (i in 2:6){
perm.p = ifelse(coef(glm)[i] > 0,
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj))
perm.p
}
rep(NA,2)
p_values = rep(NA,12)
for (i in 1:12){
p_values[i] = ifelse(coef(glm)[i] > 0,
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj))
}
p_values
p_values = rep(NA,12)
for (i in 1:12){
p_values[i] = ifelse(coef(glm)[i] > 0,
sum(perm_coefs[,i]>coef(glm[i]))/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj))
}
p_values
p_values = rep(NA,12)
for (i in 2:12){
p_values[i] = ifelse(coef(glm)[i] > 0,
sum(perm_coefs[,i]>coef(glm[i]))/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj))
}
p_values
hist(perm_coefs[1,])
hist(perm_coefs[,1])
p_values = rep(NA,12)
for (i in 1:12){
p_values[i] = ifelse(coef(glm)[i] > mean(perm_coefs[,i]),
sum(perm_coefs[,i]>coef(glm[i]))/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm[i]))/nrow(df_adj))
}
p_values
sum(perm_coefs[,2]>coef(glm[2]))/nrow(df_adj)
p_values[1]
p_values[2]
ifelse(coef(glm)[2] > mean(perm_coefs[,2]),
sum(perm_coefs[,2]>coef(glm[2]))/nrow(df_adj),
sum(perm_coefs[,2]<coef(glm[2]))/nrow(df_adj))
ifelse(coef(glm)[2] > mean(perm_coefs[,2]),
sum(perm_coefs[,2]>coef(glm)[2])/nrow(df_adj),
sum(perm_coefs[,2]<coef(glm)[2])/nrow(df_adj))
coef(glm[2])
for (i in 1:12){
p_values[i] = ifelse(coef(glm)[i] > mean(perm_coefs[,i]),
sum(perm_coefs[,i]>coef(glm)[i])/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm)[i])/nrow(df_adj))
}
p_values
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("C:/Users/david/Phan_DSPN_S23/Phan_DSPN_S23_Final")
df = read.csv("decklist_info")
head(df)
#adjust variables to decksize
df_adj = df %>%
mutate(across(c(lands,mdfcs,cantrips,ramp,other),~ .*60/decksize)) %>%
mutate(MV=MV/(decksize-lands))
#categorize archtype into aggro, control, or combo
df_adj = df_adj %>%
mutate(archtype=case_when(grepl("Aggro",archtype) ~ 'Aggro',
grepl("Control",archtype) ~ 'Control',
grepl("Combo",archtype) ~ 'Combo',
TRUE ~ archtype))
#categorize unique archtypes
#mtgtop8 has these categorized but I couldn't figure out how to extract that
unique(df_adj$archtype)
df_adj = df_adj %>% mutate(archtype=case_when(
archtype %in% c("WeenieWhite",
"DevotiontoGreen",
"RedDeckWins",
"Angels",
"ArclightPhoenix",
"Auras",
"Elves",
"Humans") ~ "Aggro",
archtype %in% c("FiresofInvention",
"Jund",
"OmnathRamp",
"Niv-MizzetReborn") ~ "Control",
archtype %in% c("LotusField",
"Greasefang",
"Creativity",
"Transmogrify",
"GreasefangParhelion",
"Reanimator",
"NeoformAtraxa") ~ "Combo",
TRUE ~ archtype))
#make sure categorical variables are factors
df_adj = df_adj %>% mutate(across(c(archtype,companion),factor))
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaps)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
#from the info above I decided it was best to just look at archtype's interaction with MV and mdfcs
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
#cross validation
cv_err  = cv.glm(df_adj, glm)
?cv.glm
??cv.glm
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyverse)
library(leaps)
library(boot)
glm_full = regsubsets(lands~(MV+mdfcs+cantrips+ramp+companion)*archtype, df_adj, nvmax=30)
full_summary = summary(glm_full)
which.min(full_summary$bic)
which.max(full_summary$adjr2)
which.min(full_summary$cp)
#from the info above I decided it was best to just look at archtype's interaction with MV and mdfcs
glm = glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion, data=df_adj)
summary(glm)
#cross validation
cv_err  = cv.glm(df_adj, glm)
cv_err$delta
#bootstrapping
boot_func <- function(data, index){
return(coef(glm(lands~(MV+mdfcs)*archtype + cantrips + ramp + companion,
data=data,
subset=index)))
}
boot = boot(df_adj,boot_func,R=1000)
boot
#permutation testing
df_perm = df_adj
perm_coefs = matrix(NA,1000,12)
colnames(perm_coefs) = c("intercept",
"MV",
"mdfcs",
"combo",
"control",
"cantrips",
"ramp",
"companion",
"mvcombo",
"mvcontrol",
"mdfccombo",
"mdfccontrol")
for (i in 1:1000){
df_perm = df_perm %>% mutate(across(c(MV,mdfcs,cantrips,ramp,companion,archtype),
~ .[sample(nrow(df_perm))]))
perm_coefs[i,] = coef(glm(lands ~ (MV+mdfcs)*archtype+cantrips+ramp+companion,
data=df_perm))
}
#plot null distributions
for (i in 2:12){
hist(perm_coefs[,i],xlab=colnames(perm_coefs)[i])
}
#get p-values
p_values = rep(NA,12)
for (i in 1:12){
p_values[i] = ifelse(coef(glm)[i] > mean(perm_coefs[,i]),
sum(perm_coefs[,i]>coef(glm)[i])/nrow(df_adj),
sum(perm_coefs[,i]<coef(glm)[i])/nrow(df_adj))
}
p_values
full_summary$obj
reg
glm_cv$
coef
?regsubsets
??regsubsets
